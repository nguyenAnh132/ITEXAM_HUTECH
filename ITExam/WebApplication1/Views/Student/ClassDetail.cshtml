 @using ITExam.ViewModels.Class 
  @model ClassDetailVM
 <!-- Import cai layout -->  
 @{  
     Layout = "_StudentLayout";  
     ViewData["Title"] = "Chi tiết lớp học";  
 }  
 @section Style {  
 <!-- FontAwesome 6.2.0 CSS -->  
 <link rel="stylesheet"  
 href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"  
 integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A=="  
 crossorigin="anonymous"  
 referrerpolicy="no-referrer" />  
     <!-- Css --> 
     <link rel="stylesheet" href="~/css/teacher-classDetail-style.css" /> 
  } 
 <div class="container-fluid p-0"> 
     <div class="pt-3 pb-1 py-lg-0 px-lg-5 px-3"> 
         <div class="row mx-0 justify-content-center pt-2"> 
             <div class="col-lg-6"> 
                 <div class="section-title text-center position-relative mb-1"> 
                     <h2 class="display-4">@Model.ClassInfo.ClassName</h2> 
                     <h6 class="d-inline-block position-relative text-secondary text-uppercase pb-2">Mô tả: @Model.ClassInfo.Description</h6> 
                 </div> 
             </div> 
         </div> 
         <div class="tab-body"> 
             <div class="tabs"> 
                 <div class="tabs-nav-wrapper position-relative"> 
                     <button class="btn-scroll left" aria-label="Scroll left"><i class="fa fa-chevron-left"></i></button> 
                     <div class="tabs-nav scrollable d-flex" role="tablist" aria-label="Content sections"> 
                         <div class="tabs-indicator"></div> 
                         <button class="tab-button" role="tab" aria-selected="true" aria-controls="panel-1" id="tab-1"> 
                             Thông tin lớp học 
                         </button> 
                         <button class="tab-button" role="tab" aria-selected="false" aria-controls="panel-2" id="tab-2"> 
                             Thành viên 
                         </button> 
                         <button class="tab-button" role="tab" aria-selected="false" aria-controls="panel-4" id="tab-4"> 
                             Đề thi 
                         </button> 
                     </div> 
                     <button class="btn-scroll right" aria-label="Scroll right"><i class="fa fa-chevron-right"></i></button> 
                 </div> 
 <!-- Thông tin lớp học --> 
                 <div class="tab-panel" role="tabpanel" id="panel-1" aria-labelledby="tab-1" aria-hidden="false"> 
                     <h2>Tên lớp: @Model.ClassInfo.ClassName</h2> 
                     <p><b>Mô tả: </b>@Model.ClassInfo.Description</p> 
                     <p><b>Giảng viên phụ trách: </b>@Model.ClassInfo.User.FullName</p> 
                     <button type="button" 
                             class="btn btn-danger mt-2" 
                             data-bs-toggle="modal" 
                             data-bs-target="#static_exit_class"> 
                         <i class="fa-solid fa-right-from-bracket me-1"></i> Thoát lớp học 
                     </button> 
                 </div> 
 <!-- Thành viên lớp học --> 
                 <div class="tab-panel" role="tabpanel" id="panel-2" aria-labelledby="tab-2" aria-hidden="true"> 
                     <h2>Danh sách sinh viên</h2> 
                     <div class="px-3 py-2 d-flex align-items-center border-bottom justify-content-between"> 
                         <div class="d-flex align-items-center gap-3"> 
                             <h3 class="fs-6 mb-0 me-3">Số lượng sinh viên: @Model.Students.Count</h3> 
                             <form action="#" class="d-inline-block"> 
                                 <div class="input-group input-group-navbar"> 
                                     <input type="text" 
                                            id="searchStudentInput" 
                                            onkeyup="searchItems('searchStudentInput', '#table-body')" 
                                            class="form-control border-1 rounded-2" 
                                            placeholder="Tìm kiếm . . . " /> 
                                 </div> 
                             </form> 
                         </div> 
                     </div> 

                     <div class="table-responsive mt-3 shadow-sm rounded"> 
                         <table class="table  table-hover align-middle text-center"> 
                             <thead class="table-primary"> 
                                 <tr> 
                                     <th scope="col">MSSV</th> 
                                     <th scope="col">Họ và tên</th> 
                                 </tr> 
                             </thead> 
                             <tbody id="table-body"> 
                                 @if (Model.Students != null && Model.Students.Any()) 
                                 { 
                                     @foreach (var sv in Model.Students) 
                                     { 
                                         <tr> 
                                             <td>@sv.StudentId</td> 
                                             <td>@sv.FullName</td> 
                                         </tr> 
                                     } 
                                 } 
                                 else 
                                 { 
                                     <tr> 
                                         <td colspan="4" class="text-muted">🚫 Không có thành viên nào trong lớp.</td> 
                                     </tr> 
                                 } 
                             </tbody> 
                         </table> 
                     </div> 

                     <nav class="mt-3"> 
                         <ul class="pagination justify-content-center" id="pagination"> 
                         </ul> 
                     </nav> 
                 </div> 
 <!-- Phần đề thi --> 
                 <div class="tab-panel p-1" role="tabpanel" id="panel-4" aria-labelledby="tab-4" aria-hidden="true"> 
                     <h2>Danh sách đề thi</h2> 
                     <!-- Nội dung đề thi viết ở đây --> 
                     <div class="px-3 py-2 d-flex justify-content-between align-items-center border-bottom d-flex"> 
                         <div class="d-flex align-items-center me-3"> 
                             <h3 class="fs-6 mb-0 me-3">Số lượng đề thi: @Model.ExamCount</h3> 
                             <form action="#" class="d-inline-block"> 
                                 <div class="input-group input-group-navbar"> 
                                     <input type="text" 
                                            id="searchExamInput" 
                                            onkeyup="searchItems('searchExamInput', '#panel-4 .mt-4')" 
                                            class="form-control border-1 rounded-2" 
                                            placeholder="Tìm kiếm . . . " /> 
                                 </div> 
                             </form> 
                         </div> 
                     </div> 

                     <div class="mt-4 d-flex flex-wrap"> 
                         @foreach (var dt in Model.Exams)
                        {
                            if (dt.Type == true)
                            {
                                var tenDe = dt.ExamName.Length > 25 ? dt.ExamName.Substring(0, 25) + "..." : dt.ExamName;
                                <div class="col-lg-4 col-md-6 mb-4" data-ten="@dt.ExamName">
                                    <div class="card h-80 shadow-sm border-0"> 
                                     <div style="height: 200px; overflow: hidden"> 
                                         <img src="~/img/exam1-avatar.png" 
                                              class="card-img-top" 
                                              style="object-fit: cover; height: 100%; width: 100%" 
                                              alt="Đề thi" /> 
                                     </div> 
                                     <div class="card-body p-1"> 
                                         <h5 class="card-title text-primary font-weight-bold" title="@dt.ExamName"> 
                                             @tenDe 
                                         </h5> 
                                         <p class="card-text mb-2"> 
                                             <i class="fa fa-tags text-dark mr-2"></i> 
                                             <strong>Loại đề:</strong> @dt.ExamType 
                                         </p> 
                                         <p class="card-text mb-2"> 
                                             <i class="fa fa-clock text-dark mr-2"></i> 
                                             <strong>Thời gian làm bài:</strong> @dt.Duration 
                                         </p> 
                                         <p class="card-text mb-2"> 
                                             <i class="fa fa-users mr-2 text-black"></i> 
                                             <strong>Số lượng câu hỏi: @dt.QuestionCount</strong> 
                                         </p> 
                                         <p class="card-text mb-2"> 
                                             <i class="fa fa-calendar-alt text-dark mr-2"></i> 
                                             <strong>Bắt đầu:</strong> @dt.StartDate.ToString("HH:mm:ss dd/MM/yyyy") 
                                         </p> 
                                         <p class="card-text mb-2"> 
                                             <i class="fa fa-calendar-check text-dark mr-2"></i> 
                                             <strong>Kết thúc:</strong> @dt.EndDate.ToString("HH:mm:ss dd/MM/yyyy") 
                                         </p> 
                                         <div class="text-danger fw-bold mb-2" id="countdown-@dt.ExamId"> 
                                             <i class="fa-solid fa-stopwatch fa-beat" style="color: #313590;"></i> 
                                              Đang tính thời gian... 
                                         </div> 
                                     </div> 
                                             <div class="col-auto px-3 py-3"> 
                                                 @{ 
                                                     var buttonStyle = "width: 120px; height: 36px; font-size: 14px; font-weight: 600;padding: 4px 8px;"; 
                                                     var buttonClass = "btn btn-sm btn-primary"; 
                                                 } 

                                                 @if (dt.ExamDate != DateTime.MinValue && dt.ExamDate != null) 
                                                 { 
                                                     <button class="@buttonClass, btn-outline-success" style="@buttonStyle"> 
                                                         <i class="fa-solid fa-circle-check me-1"></i> Đã thi 
                                                     </button> 
                                                 } 
                                                 else if (DateTime.Now < dt.StartDate) 
                                                 { 
                                                     <button class="@buttonClass" style="@buttonStyle"> 
                                                         <i class="fa-solid fa-circle-xmark me-1"></i> Chưa mở 
                                                     </button> 
                                                 } 
                                                 else if (DateTime.Now > dt.EndDate) 
                                                 { 
                                                     <button class="@buttonClass, btn-danger" style="@buttonStyle"> 
                                                         <i class="fa-solid fa-circle-xmark me-1"></i> Đã đóng 
                                                     </button> 
                                                 } 
                                                 else 
                                                 { 
                                                     <form asp-controller="Student" asp-action="ExamInfo" class="m-0"> 
                                                         <input type="hidden" name="maDe" value="@dt.ExamId" /> 
                                                         <input type="hidden" name="maLop" value="@Model.ClassInfo.ClassId" /> 
                                                         <button type="submit" class="@buttonClass" style="@buttonStyle"> 
                                                             <i class="fa-solid fa-arrow-right-to-bracket me-1"></i> Vào thi 
                                                         </button> 
                                                     </form> 
                                                 } 
                                             </div> 
                                         </div> 
                                     </div> 
                             } 
                         } 

                     </div> 
                 </div> 
          </div>  
      </div> 
  </div> 

 <!-- Modal thoát lớp học --> 
 <div class="modal fade" 
      id="static_exit_class" 
      data-bs-backdrop="static" 
      data-bs-keyboard="false" 
      tabindex="-1" 
      aria-labelledby="staticBackdropLabel" 
      aria-hidden="true"> 
     <div class="modal-dialog modal-dialog modal-dialog-centered"> 
         <div class="modal-content"> 
             <div class="modal-header"> 
                 <h1 class="modal-title fs-5" id="staticBackdropLabel"> 
                     Bạn chắc chắn muốn thoát lớp học? 
                 </h1> 
                 <button type="button" 
                         class="btn-close" 
                         data-bs-dismiss="modal" 
                         aria-label="Close"></button> 
             </div> 
             <div class="modal-footer d-flex justify-content-center"> 
                 <button type="button" 
                         class="btn btn-secondary" 
                         data-bs-dismiss="modal"> 
                     Đóng 
                 </button> 
                 <form asp-controller="Student" asp-action="ExitClass" method="post" class="d-inline"> 
                     <input type="hidden" name="malophoc" value="@Model.ClassInfo.ClassId" /> 
                     <button type="submit" class="btn btn-primary">Xác nhận</button> 
                 </form> 
             </div> 
         </div> 
     </div> 
 </div> 

      <!-- Bootstrap JavaScript Libraries -->  
      <script src="https://cdn.jsdelivr.net/npm/@@popperjs/core@2.11.6/dist/umd/popper.min.js"  
              integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3"  
              crossorigin="anonymous"></script>  
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"  
              integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V"  
              crossorigin="anonymous"></script>  
      @section Script{ 


     <!-- Đếm thời gian nè mấy bé --> 
     <script> 
         document.addEventListener("DOMContentLoaded", function () { 
             const exams = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Exams)); 

             exams.forEach(function (exam) {
                    const countdownElement = document.getElementById(`countdown-${exam.ExamId}`); //constant  getElementByClassName
                    const now = new Date().getTime();
                    const endTime = new Date(exam.EndDate).getTime();
                    const startTime = new Date(exam.StartDate).getTime(); 

                 if (!countdownElement) return; 

               if (now < startTime) { 
                 const diffTime = startTime - now; 
                 const days = Math.floor(diffTime / (1000 * 60 * 60 * 24)); 
                 const hours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); 
                 const minutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60)); 

                 countdownElement.innerHTML = ` 
                     <i class="fa-solid fa-stopwatch fa-beat" style="color: #184ecd;"></i> 
                     <span style="color: #184ecd;">Mở sau ${days} ngày ${hours} giờ ${minutes} phút.</span>`; 
             } else if (now > endTime) { 
                 countdownElement.innerHTML = ` 
                     <i class="fa-solid fa-lock text-danger"></i> 
                     <span class="text-danger fw-bold">Đề thi này đã đóng</span>`; 
             } else { 
                 const diffTime = endTime - now; 
                 const days = Math.floor(diffTime / (1000 * 60 * 60 * 24)); 
                 const hours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); 
                 const minutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60)); 

                 countdownElement.innerHTML = ` 
                     <i class="fa-solid fa-stopwatch fa-beat" style="color: #184ecd;"></i> 
                     <span style="color: #184ecd;">Còn ${days} ngày ${hours} giờ ${minutes} phút.</span>`; 
             } 

             }); 
         }); 

         // Hàm tìm kiếm bằng javascript 
         function searchItems(inputId, containerSelector) { 
                 const keyword = document.getElementById(inputId).value 
                     .toLowerCase() 
                     .normalize("NFD").replace(/[\u0300-\u036f]/g, "") 
                     .trim(); 

                 const container = document.querySelector(containerSelector); 
                 if (!container) return; 

                 const items = Array.from(container.children); 

                 const scored = items.map(el => { 
                     const text = el.innerText 
                         .toLowerCase() 
                         .normalize("NFD").replace(/[\u0300-\u036f]/g, ""); 
                     const score = text.includes(keyword) ? 1 : 0; 
                     return { el, score }; 
                 }); 

                 scored.sort((a, b) => b.score - a.score); 

                 scored.forEach(({ el, score }) => { 
                     el.style.display = keyword === '' || score > 0 ? '' : 'none'; 
                     container.appendChild(el); 
                 }); 
             } 

             document.addEventListener('DOMContentLoaded', () => { 
                 const searchReviewInput = document.getElementById('searchReviewInput'); 
                 const searchExamInput = document.getElementById('searchExamInput'); 

                 if (searchReviewInput) { 
                     searchReviewInput.addEventListener("input", () => { 
                         searchItems('searchReviewInput', '#panel-3 .mt-4'); 
                     }); 
                 } 

                 if (searchExamInput) { 
                     searchExamInput.addEventListener("input", () => { 
                         searchItems('searchExamInput', '#panel-4 .mt-4'); 
                     }); 
                 } 
             }); 
     </script> 
    
         <script> 
                  document.addEventListener('DOMContentLoaded', () => { 
                 const tabList = document.querySelector('.tabs-nav'); 
                 const tabs = tabList.querySelectorAll('.tab-button'); 
                 const panels = document.querySelectorAll('.tab-panel'); 
                 const indicator = document.querySelector('.tabs-indicator'); 

                 const setIndicatorPosition = (tab) => { 
                     indicator.style.transform = `translateX(${tab.offsetLeft}px)`; 
                     indicator.style.width = `${tab.offsetWidth}px`; 
                 }; 

                 // Set initial indicator position 
                 setIndicatorPosition(tabs[0]); 

                 tabs.forEach((tab) => { 
                     tab.addEventListener('click', (e) => { 
                         const targetTab = e.target; 
                         const targetPanel = document.querySelector( 
                             `#${targetTab.getAttribute('aria-controls')}` 
                         ); 

                         // Update tabs 
                         tabs.forEach((tab) => { 
                             tab.setAttribute('aria-selected', false); 
                             tab.classList.remove('active'); 
                         }); 
                         targetTab.setAttribute('aria-selected', true); 
                         targetTab.classList.add('active'); 

                         // Update panels 
                         panels.forEach((panel) => { 
                             panel.setAttribute('aria-hidden', true); 
                         }); 
                         targetPanel.setAttribute('aria-hidden', false); 

                         // Move indicator 
                         setIndicatorPosition(targetTab); 
                     }); 
                 }); 

                 // Keyboard navigation 
                 tabList.addEventListener('keydown', (e) => { 
                     const targetTab = e.target; 
                     const previousTab = targetTab.previousElementSibling; 
                     const nextTab = targetTab.nextElementSibling; 

                     if (e.key === 'ArrowLeft' && previousTab) { 
                         previousTab.click(); 
                         previousTab.focus(); 
                     } 
                     if (e.key === 'ArrowRight' && nextTab) { 
                         nextTab.click(); 
                         nextTab.focus(); 
                     } 
                 }); 
             }); 

         </script> 
        
         <script> 
             // Bổ sung giống giảng viên 
             document.addEventListener('DOMContentLoaded', () => { 
                 const tabList = document.querySelector('.tabs-nav'); 
                 const tabWrapper = document.querySelector('.tabs-nav-wrapper'); 
                 const scrollContainer = document.querySelector('.tabs-nav.scrollable'); 
                 const btnLeft = document.querySelector('.btn-scroll.left'); 
                 const btnRight = document.querySelector('.btn-scroll.right'); 
                 const tabs = tabList.querySelectorAll('.tab-button'); 
                 const panels = document.querySelectorAll('.tab-panel'); 
                 const indicator = tabList.querySelector('.tabs-indicator'); 

                 function setIndicatorPosition(tab) { 
                     if (!tab) return; 
                     indicator.style.transform = `translateX(${tab.offsetLeft}px)`; 
                     indicator.style.width = `${tab.offsetWidth}px`; 
                 } 

                 function activateTab(tab) { 
                     tabs.forEach(t => { 
                         t.setAttribute('aria-selected', 'false'); 
                         t.classList.remove('active'); 
                     }); 
                     panels.forEach(p => p.setAttribute('aria-hidden', 'true')); 

                     const panelId = tab.getAttribute('aria-controls'); 
                     const targetPanel = document.getElementById(panelId); 

                     if (targetPanel) { 
                         tab.setAttribute('aria-selected', 'true'); 
                         tab.classList.add('active'); 
                         targetPanel.setAttribute('aria-hidden', 'false'); 
                         setIndicatorPosition(tab); 
                     } 
                 } 

                 tabs.forEach((tab, index) => { 
                     tab.addEventListener('click', () => activateTab(tab)); 
                     if (index === 0) activateTab(tab); 
                 }); 

                 // Scroll buttons 
                 btnLeft.addEventListener("click", () => { 
                     scrollContainer.scrollBy({ left: -150, behavior: "smooth" }); 
                 }); 

                 btnRight.addEventListener("click", () => { 
                     scrollContainer.scrollBy({ left: 150, behavior: "smooth" }); 
                 }); 

                 // Show buttons only when overflow 
                 function updateScrollButtons() { 
                     const overflow = scrollContainer.scrollWidth > scrollContainer.clientWidth; 
                     btnLeft.style.display = overflow ? 'inline-flex' : 'none'; 
                     btnRight.style.display = overflow ? 'inline-flex' : 'none'; 
                 } 

                 window.addEventListener('resize', updateScrollButtons); 
                 updateScrollButtons(); 
             }); 
         </script> 
         <script> 
             // Chuyển đến tab đề thi 
             document.addEventListener('DOMContentLoaded', () => { 
                 // Lấy query string từ URL 
                 const params = new URLSearchParams(window.location.search); 
                 const tab = params.get("tab"); 

                 if (!tab) return; 

                 const tabMapping = { 
                     info: "tab-1", 
                     member: "tab-2", 
                     exam: "tab-4" 
                 }; 

                 const targetTabId = tabMapping[tab]; 
                 const targetTab = document.getElementById(targetTabId); 

                 if (targetTab) { 
                     targetTab.click(); // Giả lập click tab tương ứng 
                 } 
             }); 
         </script> 

      } 
