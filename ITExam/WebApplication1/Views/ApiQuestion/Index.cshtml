@using ITExam.ViewModels.ExamBank
@using Newtonsoft.Json
@model CreateQuestionWithGeminiVM
@{
    Layout = "_TeacherLayout";
    ViewData["Title"] = "Tạo câu hỏi với AI";
}

@section Style {
    <link rel="stylesheet" href="~/css/teacher-create-exam-matrix.css" />
}

<div class="container-fluid py-4 px-1 px-md-5">

    <div class="page-header text-center">
        <h2 class="display-5">Tạo câu hỏi với Trí tuệ nhân tạo</h2>
        <p class="text-muted">Xây dựng ma trận nội dung để AI tạo ra các câu hỏi theo yêu cầu.</p>
    </div>

    <div class="bg-white p-3 rounded shadow-sm mb-4">
        <label class="form-label fw-bold">Môn học:</label>
        <p class="fs-5 mb-0">@Model.SubjectName</p>
    </div>

    <form id="matrix-form" method="post" asp-controller="ApiQuestion" asp-action="CreateQuestionFromGemini" asp-route-id="@Model.ExamBankId">
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-12 col-lg-8 mb-4">
                <div class="bg-white p-2 rounded shadow-sm">
                    <div class="d-flex align-items-center mb-3">
                        <h4 class="mb-0">Ma trận nội dung</h4>
                        <button type="button" class="btn btn-primary ms-auto" id="btn-add-chuong">
                            <i class="fa-solid fa-plus me-2"></i>Thêm Chương
                        </button>
                    </div>

                    <div id="chuong-container" class="my-3">
                        <div class="empty-state mb-2">
                            <input class="form-control" name="requests" placeholder="Nhập yêu cầu ở đây"/>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-12 col-lg-4 mb-4 chuong-container">
                <div class="sticky-sidebar">
                    <div class="bg-white p-2 rounded shadow-sm">
                        <h4 class="mb-3">Thông tin tóm tắt</h4>
                        <div id="summary-chuong-cauhoi" class="mt-3">
                            <p class="text-muted">Chưa có câu hỏi nào</p>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between align-items-center fs-5">
                            <span class="fw-semibold">Tổng cộng:</span>
                            <span class="fw-bold text-primary" id="tong-so-cau">0 câu</span>
                        </div>
                        <button type="submit" class="btn btn-success w-100 mt-4 btn-lg">
                            <i class="fa-solid fa-cogs me-1"></i> Tạo câu hỏi ngay
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

@section Script {
    <script>

        const chuongData = @Html.Raw(JsonConvert.SerializeObject(Model.Chapters));
        let rowIndex = 0;

        document.getElementById('btn-add-chuong').addEventListener('click', function () {
            const container = document.getElementById('chuong-container');
            const rowId = `row-${rowIndex}`;

            let html = `
                <div class="border p-3 rounded mb-3" id="${rowId}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <select class="form-select chuong-select me-2" name="MatrixRows[${rowIndex}].ChapterId" required>
                            <option value="">-- Chọn chương --</option>
                        </select>
                        <button type="button" class="btn btn-danger" onclick="xoaDongChuong('${rowId}')">
                            <i class="fa fa-trash"></i>
                        </button>
                    </div>
                    <div class="clo-list"></div>
                </div>`;

            container.insertAdjacentHTML('beforeend', html);
            capNhatDanhSachChuongComboBox();
            rowIndex++;
        });

        document.addEventListener('change', function (e) {
            if (e.target.classList.contains('chuong-select')) {
                const chuongId = e.target.value;
                const chuong = chuongData.find(c => c.ChapterId == chuongId);
                const cloListContainer = e.target.closest('.border').querySelector('.clo-list');
                const currentRowIndex = e.target.name.match(/\[(\d+)\]/)[1];

                if (!chuong) {
                    cloListContainer.innerHTML = '';
                    return;
                };

                let cloHTML = '';
                chuong.Clos.forEach((clo, cloIndex) => {
                    cloHTML += `
                <div class="row g-2 my-2">
                    <!-- hidden input -->
                    <input type="hidden"
                           name="MatrixRows[${currentRowIndex}].CloInputs[${cloIndex}].CloId"
                           value="${clo.CLOId}" />

                    <!-- CLO text -->
                    <div class="col-12 col-md-8">
                        <input value="[${clo.CLOTitle}] ${clo.CLODescription}"
                               disabled
                               type="text"
                               class="form-control" />
                    </div>

                    <!-- Number input -->
                    <div class="col-6 col-md-4">
                        <input type="number"
                               value="0"
                               min="0"
                               class="form-control"
                               placeholder="Số lượng"
                               name="MatrixRows[${currentRowIndex}].CloInputs[${cloIndex}].QuestionCount" />
                    </div>
                </div>
                `;
                });

                cloListContainer.innerHTML = cloHTML;
                capNhatThongTinCauHoi();
            }
        });

        document.addEventListener('input', function (e) {
            if (e.target.matches('.clo-list input[type="number"]')) {
                capNhatThongTinCauHoi();
            }
        });


        function xoaDongChuong(rowId) {
            const rowElement = document.getElementById(rowId);
            if (rowElement) {
                rowElement.remove();
                capNhatThongTinCauHoi();
                capNhatDanhSachChuongComboBox();
            }
        }

        function capNhatDanhSachChuongComboBox() {
            const selectedChapterIds = Array.from(document.querySelectorAll('.chuong-select'))
                .map(select => select.value)
                .filter(value => value !== "");

            document.querySelectorAll('.chuong-select').forEach(select => {
                const currentSelectedValue = select.value;
                select.innerHTML = '<option value="">-- Chọn chương --</option>';

                chuongData.forEach(chuong => {

                    if (!selectedChapterIds.includes(chuong.ChapterId.toString()) || chuong.ChapterId.toString() === currentSelectedValue) {
                        const option = new Option(chuong.ChapterName, chuong.ChapterId);
                        select.add(option);
                    }
                });
                select.value = currentSelectedValue;
            });
        }

        function capNhatThongTinCauHoi() {
            const summaryContainer = document.getElementById('summary-chuong-cauhoi');
            const totalQuestionsSpan = document.getElementById('tong-so-cau');
            summaryContainer.innerHTML = '';
            let totalQuestions = 0;

            document.querySelectorAll('#chuong-container > .border').forEach(row => {
                const select = row.querySelector('.chuong-select');
                const chapterName = select.options[select.selectedIndex]?.textContent;

                if (!select.value) return;

                let questionsInChapter = 0;
                row.querySelectorAll('.clo-list input[type="number"]').forEach(input => {
                    questionsInChapter += parseInt(input.value) || 0;
                });

                totalQuestions += questionsInChapter;

                if (questionsInChapter > 0) {
                     const summaryRow = `
                        <div class="d-flex justify-content-between mb-2">
                            <span>${chapterName}</span>
                            <span class="fw-bold">${questionsInChapter} câu</span>
                        </div>`;
                    summaryContainer.insertAdjacentHTML('beforeend', summaryRow);
                }
            });

            totalQuestionsSpan.textContent = totalQuestions;
        }

    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const matrixForm = document.getElementById('matrix-form');

            if (matrixForm) {
                matrixForm.addEventListener('submit', function(event) {
                    const overlay = document.getElementById('loading-overlay');
                    if (overlay) {
                        overlay.style.display = 'flex';
                    }
                    const submitButton = matrixForm.querySelector('button[type="submit"]');
                    if(submitButton) {
                        submitButton.disabled = true;
                        submitButton.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...`;
                    }
                });
            }
        });
    </script>
}